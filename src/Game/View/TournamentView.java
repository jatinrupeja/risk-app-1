/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Game.View;

import Game.Model.PhaseData;
import Game.Model.TournamentData;
import Game.Model.TournamentGame;
import Game.Risk.DataHolder;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.List;
import java.util.Observable;
import java.util.Observer;

/**
 * The view for the tournament mode
 * @author vansh, ndkcha
 */
@SuppressWarnings("deprecation")
public class TournamentView extends JFrame implements Observer, ActionListener {
    private DataHolder holder = DataHolder.getInstance();

    private TournamentData tournamentData = new TournamentData();
    private JButton btnMap[][] = new JButton[5][5];
    private JLabel labelMap[] = new JLabel[5];
    private JLabel labelResults, labelGameLogs;
    private JScrollPane jScrollPane1 = new JScrollPane();
    private JScrollPane jScrollPane2 = new JScrollPane();
    private JSeparator jSeparator1 = new JSeparator();
    private JTable tableTournament = new JTable();
    private JList<String> listGameLogs = new JList<>();

    private DefaultListModel<String> modelListGameLogs = new DefaultListModel<>();
    private DefaultTableModel modelTournament = new DefaultTableModel();

     /**
     * Creates new form NewJFrame
     */
    public TournamentView() {
        for (int i = 0; i < 5; i++) {
            for (int j = 0; j < 5; j++) {
                btnMap[i][j] = new JButton(" G " + j);
                btnMap[i][j].setVisible(false);
                btnMap[i][j].setActionCommand(i + ":" + j);
                btnMap[i][j].addActionListener(this);
            }

            labelMap[i] = new JLabel("Map " + i + ":");
            labelMap[i].setVisible(false);
        }
        labelResults = new JLabel("Results:");
        labelGameLogs = new JLabel("Game Logs:");

        this.tournamentData.addObserver(this);
    }

    /**
     * Add the future game paths (such as map path and image path) to temporary buffer
     * @param path path to the map file
     * @param imagePath path to the bmp file
     * @param noOfGames number of games to play with this map
     */
    public void addGamePath(String path, String imagePath, String noOfGames) {
        this.tournamentData.addGamePath(path, imagePath, noOfGames);
    }

    /**
     * Start the games in tournament
     */
    public void startGame() {
        int maxGames = 0;
        int mapNumber = 0;
        for (List<String> map : this.tournamentData.getMapBuffer()) {
            int noOfGames = Integer.parseInt(map.get(2));

            for (int j = 0; j < noOfGames; j++) {
                btnMap[mapNumber][j].setVisible(true);
            }

            labelMap[mapNumber].setVisible(true);

            mapNumber++;
            if (noOfGames > maxGames)
                maxGames = noOfGames;
        }

        int maxMaps = this.tournamentData.getMapBuffer().size();

        this.modelTournament.addColumn("Maps");
        for (int i = 0; i < maxGames; i++) {
            this.modelTournament.addColumn("Game " + i);
        }

        for (int i = 0; i < maxMaps; i++) {
            String[] row = { "Map" + i };
            this.modelTournament.addRow(row);
        }

        this.tournamentData.startNextGame();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT
     * modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    public void initComponents() {
        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);

        jScrollPane1.setViewportView(listGameLogs);
        jScrollPane2.setViewportView(tableTournament);
        tableTournament.setModel(this.modelTournament);
        listGameLogs.setModel(this.modelListGameLogs);

        this.organizeTheLayout();

        setVisible(true);
        pack();
    }

    /**
     * Organize the layout on the UI.
     * It will setup all the components on the view.
     */
    private void organizeTheLayout() {
        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addComponent(labelMap[0], GroupLayout.PREFERRED_SIZE, 78, GroupLayout.PREFERRED_SIZE)
                        .addComponent(labelMap[1], GroupLayout.PREFERRED_SIZE, 60, GroupLayout.PREFERRED_SIZE)
                        .addComponent(labelMap[3], GroupLayout.PREFERRED_SIZE, 48, GroupLayout.PREFERRED_SIZE)
                        .addComponent(labelMap[4], GroupLayout.PREFERRED_SIZE, 47, GroupLayout.PREFERRED_SIZE)
                        .addComponent(labelMap[2], GroupLayout.PREFERRED_SIZE, 154, GroupLayout.PREFERRED_SIZE)
                        .addComponent(labelResults)
                        .addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                                        .addComponent(btnMap[0][0])
                                        .addComponent(btnMap[1][0]))
                                    .addGap(18, 18, 18)
                                    .addGroup(layout.createParallelGroup(GroupLayout.Alignment.TRAILING, false)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(btnMap[0][1], GroupLayout.PREFERRED_SIZE, 71, GroupLayout.PREFERRED_SIZE)
                                            .addGap(18, 18, 18)
                                            .addComponent(btnMap[0][2]))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(btnMap[1][1], GroupLayout.PREFERRED_SIZE, 69, GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(btnMap[1][2], GroupLayout.PREFERRED_SIZE, 71, GroupLayout.PREFERRED_SIZE)))
                                    .addGap(18, 18, 18)
                                    .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(btnMap[1][3], GroupLayout.PREFERRED_SIZE, 69, GroupLayout.PREFERRED_SIZE)
                                            .addGap(18, 18, 18)
                                            .addComponent(btnMap[1][4], GroupLayout.PREFERRED_SIZE, 69, GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(btnMap[0][3])
                                            .addGap(18, 18, 18)
                                            .addComponent(btnMap[0][4]))))
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(GroupLayout.Alignment.TRAILING, false)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(btnMap[3][0])
                                            .addGap(18, 18, 18)
                                            .addComponent(btnMap[3][1], GroupLayout.PREFERRED_SIZE, 69, GroupLayout.PREFERRED_SIZE)
                                            .addGap(18, 18, 18)
                                            .addComponent(btnMap[3][2], GroupLayout.PREFERRED_SIZE, 71, GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(btnMap[2][0])
                                            .addGap(18, 18, 18)
                                            .addComponent(btnMap[2][1], GroupLayout.PREFERRED_SIZE, 69, GroupLayout.PREFERRED_SIZE)
                                            .addGap(20, 20, 20)
                                            .addComponent(btnMap[2][2]))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(btnMap[4][0])
                                            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(btnMap[4][1], GroupLayout.PREFERRED_SIZE, 69, GroupLayout.PREFERRED_SIZE)
                                            .addGap(18, 18, 18)
                                            .addComponent(btnMap[4][2], GroupLayout.PREFERRED_SIZE, 71, GroupLayout.PREFERRED_SIZE)))
                                    .addGap(18, 18, 18)
                                    .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                            .addComponent(btnMap[2][3])
                                            .addGap(18, 18, 18)
                                            .addComponent(btnMap[2][4], GroupLayout.PREFERRED_SIZE, 69, GroupLayout.PREFERRED_SIZE))
                                        .addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                            .addComponent(btnMap[3][3], GroupLayout.PREFERRED_SIZE, 69, GroupLayout.PREFERRED_SIZE)
                                            .addGap(18, 18, 18)
                                            .addComponent(btnMap[3][4], GroupLayout.PREFERRED_SIZE, 68, GroupLayout.PREFERRED_SIZE))
                                        .addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                            .addComponent(btnMap[4][3])
                                            .addGap(18, 18, 18)
                                            .addComponent(btnMap[4][4], GroupLayout.PREFERRED_SIZE, 68, GroupLayout.PREFERRED_SIZE)))))
                            .addGap(17, 17, 17)))
                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 186, Short.MAX_VALUE)
                    .addComponent(labelGameLogs, GroupLayout.PREFERRED_SIZE, 91, GroupLayout.PREFERRED_SIZE)
                    .addGap(145, 145, 145))
                .addGroup(layout.createSequentialGroup()
                    .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(9, 9, 9)
                            .addComponent(jScrollPane2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                        .addComponent(jSeparator1))
                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jScrollPane1)
                    .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(labelMap[0])
                            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                .addComponent(btnMap[0][0])
                                .addComponent(btnMap[0][1])
                                .addComponent(btnMap[0][2])
                                .addComponent(btnMap[0][3])
                                .addComponent(btnMap[0][4]))
                            .addGap(18, 18, 18)
                            .addComponent(labelMap[1])
                            .addGap(18, 18, 18)
                            .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                .addComponent(btnMap[1][0])
                                .addComponent(btnMap[1][1])
                                .addComponent(btnMap[1][2])
                                .addComponent(btnMap[1][3])
                                .addComponent(btnMap[1][4]))
                            .addGap(27, 27, 27)
                            .addComponent(labelMap[2])
                            .addGap(18, 18, 18)
                            .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                .addComponent(btnMap[2][0])
                                .addComponent(btnMap[2][1])
                                .addComponent(btnMap[2][2])
                                .addComponent(btnMap[2][3])
                                .addComponent(btnMap[2][4]))
                            .addGap(18, 18, 18)
                            .addComponent(labelMap[3])
                            .addGap(18, 18, 18)
                            .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                .addComponent(btnMap[3][0])
                                .addComponent(btnMap[3][1])
                                .addComponent(btnMap[3][2])
                                .addComponent(btnMap[3][3])
                                .addComponent(btnMap[3][4]))
                            .addGap(18, 18, 18)
                            .addComponent(labelMap[4])
                            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                .addComponent(btnMap[4][0])
                                .addComponent(btnMap[4][1])
                                .addComponent(btnMap[4][2])
                                .addComponent(btnMap[4][3])
                                .addComponent(btnMap[4][4]))
                            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jSeparator1, GroupLayout.PREFERRED_SIZE, 10, GroupLayout.PREFERRED_SIZE)
                            .addGap(2, 2, 2)
                            .addComponent(labelResults)
                            .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jScrollPane2, GroupLayout.PREFERRED_SIZE, 124, GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(labelGameLogs)
                            .addGap(5, 5, 5)
                            .addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 490, GroupLayout.PREFERRED_SIZE)))
                    .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }

    @Override
    public void update(Observable o, Object arg) {
        if (arg instanceof String) {
            switch ((String) arg) {
                case PhaseData.END_GAME:
                    this.endGame(o);
                    break;
            }
        }
    }

    /**
     * Executed when the game is ended
     */
    private void endGame(Observable observable) {
        PhaseData data = (PhaseData) observable;
        String gameContent[] = data.getGameId().split(":");
        int map = Integer.parseInt(gameContent[0]);
        int game = Integer.parseInt(gameContent[1]);

        if (this.modelTournament.getValueAt(map, game + 1) == null) {
            System.out.println("winner: " + data.getWinner() + " - " + data.getGameId());

            this.modelTournament.setValueAt(data.getWinner(), map, game + 1);
            this.tableTournament.setModel(this.modelTournament);

            this.tournamentData.addGame(data.getGameId(), holder.getGameLogs());
        }
    }

    /**
     * When any map button is clicked, show the appropriate logs
     * @param e the action event
     */
    @Override
    public void actionPerformed(ActionEvent e) {
        String content[] = e.getActionCommand().split(":");
        int map = Integer.parseInt(content[0]) + 1;
        int game = Integer.parseInt(content[1]) + 1;

        List<String> logs = tournamentData.getGameLogs(e.getActionCommand());

        modelListGameLogs.removeAllElements();

        modelListGameLogs.addElement("Map " + map + " : Game " + game);

        for (String log : logs) {
            modelListGameLogs.addElement(log);
        }

        listGameLogs.setModel(modelListGameLogs);
    }
}
